package main

import (
	"fmt"

	swagger "github.com/arsmn/fiber-swagger/v2"
	"github.com/gofiber/fiber/v2"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/schema"

	// docs are generated by Swag CLI, you have to import them.
	// replace with your own docs folder, usually "github.com/username/reponame/docs"
	_ "main/docs/apidocs"
	"main/pkg/adapters/handler"
	"main/pkg/core/service"
)

func initDB() (*gorm.DB, error) {

	gormCfg := gorm.Config{
		NamingStrategy: schema.NamingStrategy{
			SingularTable: false,
		},
	}

	dsn := "host=postgresql user=spuser password=SPuser96 dbname=job_portal port=5432 sslmode=disable TimeZone=Asia/Jakarta"

	db, err := gorm.Open(postgres.Open(dsn), &gormCfg)

	if err != nil {
		return nil, err
	}

	sqlDB, err := db.DB()
	if err != nil {
		return nil, err
	}

	sqlDB.SetMaxOpenConns(10)
	sqlDB.SetMaxIdleConns(5)

	return db, nil
}

var (
	jobService *service.JobService
)

// @title Fiber Example API
// @version 1.0
// @description This is a sample swagger for Fiber
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email fiber@swagger.io
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:4000
// @BasePath /
func main() {
	// connect to database and create database
	// if it does not exist

	app := fiber.New()

	// Initialize default config
	// app.Use(cors.New())

	// // Or extend your config for customization
	// app.Use(cors.New(cors.Config{
	// 	AllowOrigins:     "*",
	// 	AllowCredentials: true,
	// }))

	// Initialize the database connection
	db, err := initDB()
	if err != nil {
		fmt.Println("Error connecting to database:", err)
		return
	}

	// check connection to database
	sqlDB, err := db.DB()
	if err != nil {
		fmt.Println("Error connecting to database:", err)
		return
	}

	err = sqlDB.Ping()
	if err != nil {
		fmt.Println("Error connecting to database:", err)
		return
	}

	// access swagger documentation
	// app.Get("/swagger/*", swagger.HandlerDefault) // default

	//define handler
	jobHandler := handler.NewJobHandler(*jobService)

	// Serve Swagger UI statically from the "./docs/" directory
	app.Get("/swagger/*", swagger.HandlerDefault) // default

	app.Get("/", func(c *fiber.Ctx) error {
		return c.SendString("Hello, World!")
	})

	app.Route("/api/v1", func(r fiber.Router) {
		// Jobs group
		r.Get("/jobs", jobHandler.GetJobs)
	})

	app.Listen(":4000")
}
